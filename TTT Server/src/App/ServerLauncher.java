/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package App;

import Cryptography.CryptoRSA;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author nouemankhal
 */
public class ServerLauncher extends javax.swing.JFrame {
    
    private ServerSocket server;
    private int port;

    public ServerLauncher() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(247, 247, 247));
        btnStop.setEnabled(false);
        logArea.setEditable(false);
        CryptoRSA.initRSA();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        txtPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane1.setViewportView(logArea);

        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        jLabel1.setText("   Port");

        btnStart.setBackground(new java.awt.Color(14, 121, 183));
        btnStart.setForeground(new java.awt.Color(204, 255, 255));
        btnStart.setText("Start Server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setBackground(new java.awt.Color(14, 121, 183));
        btnStop.setForeground(new java.awt.Color(204, 255, 255));
        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(9, 9, 9)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        Thread T = new Thread() {
            @Override
            public void run() {
                try {
                    // TODO add your handling code here:
                    if (txtPort.getText().length() == 0) {
                        JOptionPane.showMessageDialog(null, "Insert a valid port Number !", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    btnStart.setEnabled(false);
                    btnStop.setEnabled(true);
                    

                    port = Integer.parseInt(txtPort.getText());
                    
                    txtPort.setEnabled(false);
                    
                    server = new ServerSocket(port);
                    
                    showMessage("Server Launched !");
                    showMessage("Port : " + port);
                    showMessage("IP : " + server.getInetAddress().getLocalHost().getHostAddress());
                    System.out.println("Server Launched ! Port : " + port);

                    while (true) {
                        Socket socket = null;
                        
                        try {
                            socket = server.accept();
                            showMessage("A new client is connected : " + socket.getRemoteSocketAddress());
                            System.out.println("A new client is connected : " + socket.getRemoteSocketAddress());

                            ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
                            output.flush();
                            
                            ObjectInputStream input = new ObjectInputStream(socket.getInputStream());

                            showMessage("Assigning new thread for this client");

                            Thread t = new ClientHandler(socket, input, output);
                            t.start();

                        } catch (Exception e) {
                            socket.close();
                            e.printStackTrace();
                        }

                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        };
        
        T.start();
    }//GEN-LAST:event_btnStartActionPerformed


    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
        // TODO add your handling code here:
        btnStartActionPerformed(evt);
    }//GEN-LAST:event_txtPortActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
        txtPort.setEnabled(true);
        txtPort.setText("");
        try {
            server.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void showMessage(String message) {
        SwingUtilities.invokeLater(
                new Runnable() {
            public void run() {
                logArea.append("\n " + message + "\n");
            }
        }
        );
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        new ServerLauncher().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logArea;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}
